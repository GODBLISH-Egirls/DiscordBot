import os
from typing import Union

import openai
from discord.ext.commands import Cog, Context, command
from dotenv import load_dotenv

from blish.blish import Blish

load_dotenv()
API_KEY = os.getenv("OPENAI_API_KEY")


class OpenAi(Cog):
    """

    The OpenAi class is a custom class designed to incorporate OpenAI's language model capabilities into a Discord bot.
    This class contains methods that allow the bot to respond to messages and commands with natural language text generated by OpenAI's language model.

    """

    # Cheap model engine for text completion ($0.0004 / 1K tokens)
    ADA_MODEL_ENGINE = "text-ada-002"

    # Most powerful model ($0.0200  / 1K tokens)
    DAVINCI_MODEL_ENGINE = "text-davinci-003"

    # A smaller and faster language model that is suitable for tasks that require real-time performance. ($0.0020  / 1K tokens)
    CURIE_MODEL_ENGINE = "text-curie-001"

    # A language model that has a smaller capacity than Davinci also much cheaper, but is still capable of generating high-quality text. ($0.0005  / 1K tokens)
    BABBAGE_MODEL_ENGINE = "text-babbage-001"

    def __init__(self, bot: Blish, api_key: Union[str, None] = API_KEY, *args, **kwargs):
        super(*args, **kwargs)
        self.bot = bot
        openai.api_key = api_key

    @command(name="ask")
    async def text_generation(self, context: Context):
        if context.message.content:
            prompt = context.message.content.split(' ', 1)[1]
            try:
                response = self._text_generation(prompt=prompt)
                await context.send(response)
            except Exception as e:
                print("Error Occurred when generating text from model. An exception was raised:", e)
        else:
            await context.send("What would you like to ask?")

    def _text_generation(self,
                         model: str = BABBAGE_MODEL_ENGINE,
                         prompt: str = "",
                         temperature: float = 0.50,
                         max_tokens: int = 500) -> str:
        """
        Summary:
            Generate text using OpenAI's API.
            This function uses OpenAI's API to perform text completion/generation based on the provided prompt.


        Args:
            model (str, optional): OpenAI's language model engine used to generate text. Defaults to BABBAGE_MODEL_ENGINE.
            prompt (str, optional): User prompt to the bot. Defaults to "".
            temperature (float, optional): Controls randomness and creativity of the generated text with 0 being most confident in response
             and 1 being most creative/random. Defaults to 0.50.
            max_tokens (int, optional): Maximum amount of tokens the response text can generate. Defaults to 250.

        Returns:
            str: Text generated by OpenAi's Language model
        """
        if not prompt:
            return ""

        response = openai.Completion.create(
            model=model,
            prompt=prompt,
            temperature=temperature,
            max_tokens=max_tokens
        )

        # TODO: Add proper logging and other stuff to track token usage.
        print(response)
        if response and response.get("choices"):
            return response.get("choices")[0].get("text")

        return ""

    @command(name="image")
    async def image_generation(self, context: Context):
        if context.message.content:
            prompt = context.message.content.split(' ', 1)[1]
            try:
                response = self._image_generation(prompt=prompt)
                await context.send(response)
            except Exception as e:
                print("Error Occurred when generating image from model. An exception was raised:", e)
        else:
            await context.send("What image would you like to generate?")

    def _image_generation(self, prompt: str = "", number_of_images: int = 1, image_size: str = "256x256") -> str:
        """
            Generate image using OpenAI's API.
            This function uses OpenAI's API to perform image generation based on the provided prompt.

        Args:
            prompt (str, optional): User prompt to the bot. Defaults to "".
            number_of_images (int, optional): Number of images to be generated. Defaults to 1.
            image_size (str, optional): Image size (1024×1024, 512×512, 256×256	). Defaults to "256x256".

        Returns:
            str: Image url generated by OpenAi's Image Model
        """
        if not prompt:
            return ""

        response = openai.Image.create(prompt=prompt, n=number_of_images, size=image_size)

        if response:
            print(response)
            image_url = response['data'][0]['url']
            return image_url

        return ""


async def setup(bot: Blish) -> None:
    """Load the OpenAi cog."""
    await bot.add_cog(OpenAi(bot))
